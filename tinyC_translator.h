#ifndef __TRANSLATOR_H
#define __TRANSLATOR_H

#include <bits/stdc++.h>
using namespace std;

// sizes of the basic types

#define size_of_void 0
#define size_of_func 0
#define size_of_char 1
#define size_of_int 4
#define size_of_ptr 8
#define size_of_float 8

// enum for data types

typedef enum{
    TYPE_VOID,
    TYPE_INT,
    TYPE_CHAR,
    TYPE_FLOAT,
    TYPE_PTR,
    TYPE_FUNC,
    TYPE_ARR,
    TYPE_BOOL
} DataType;

// enum for opcodes

typedef enum{
    ADD, SUB, MULT, DIV, MOD, SL, SR,
    BIT_AND, BIT_OR, BIT_XOR,
    BIT_U_NOT, U_PLUS, U_MINUS, REF, DEREF, U_NEG,
    GOTO_EQ, GOTO_NEQ, GOTO_GT, GOTO_GTE, GOTO_LT, GOTO_LTE, IF_GOTO, IF_FALSE_GOTO,
    CtoI, CtoF, ItoC, ItoF, FtoC, FtoI,
    ASSIGN, GOTO, RETURN, PARAM, CALL, ARR_IDX_ARG, ARR_IDX_RES, FUNC_BEG, FUNC_END, L_DEREF
} opcode;

// class declarations

class symbolValue;  // value of a symbol
class symbolType;   // type of a symbol
class symbol;       // symbol table entry
class symbolTable;  // symbol table

class quad;         // quad array element
class quadArray;    // array of quads

// variables and methods generated by bison

extern char* yytext;    // text of the current token
extern int yyparse();   // parsing function

// class definitions
class symbolType {
    public:
    int pointers;           // useful for pointer types
    DataType type;          // type of the symbol
    DataType nextType;      // for arrays/pointers, it points to the type of the elements of the array/pointer
    vector<int> dims;       // stores the dimensions of the array
};

class symbol{
    public:
    string name;    // name of the symbol
    symbolType type;   // type of the symbol
    symbolValue* initVal;   // initial value of the symbol
    int size;   // size of the symbol
    int offset; // offset of the symbol
    symbolTable* nestedTable;   // pointer to a nested symbol table, if any (useful for functions and blocks)

    symbol();   // constructor
};

class symbolValue {
public:
    int i;              // stores value for int
    char c;             // stores value for char
    float f;            // stores value for float
    void* p;            // stores value for pointers

    void setInitVal(int val);
    void setInitVal(char val);
    void setInitVal(float val);
};


class symbolTable{
    public:
    map<string, symbol*> table;     // list of symbols hashed by name
    vector<symbol*> symbols;        // list of symbols present in the table
    int offset;                
    static int tempCount;           // count variable for naming temporary variables

    symbolTable();              // constructor

    // looks up symbol in the table, if it exists, it is returned, else new symbol is created and returned
    symbol* lookup(string name, DataType t = TYPE_INT, int pc = 0);

    // searches for symbol in global symbol table, if id exists, it is returned, else NULL is returned
    symbol* searchGlobal(string name);

    // generates a new temporary variable, inserts it into the table and returns it
    string gentemp(DataType t = TYPE_INT);

    // prints the symbol table
    void print(string tableName);
};

class quad{
    public:
    opcode op;              // operator
    string arg1;            // argument 1
    string arg2;            // argument 2
    string result;          // result

    //constructor
    quad(string res, string arg1, string arg2, opcode op);

    string print();         // print the quad
};

// denotes the entire list of quads
class quadArray{
    public:
    vector<quad> arr;       // vector of all the quads generated

    void print();           // print the quad vector
};

class param {
public:
    string name;            // name of the parameter
    symbolType type;        // type of the parameter
};

class expression{
    public:
    int instr;              // instruction number of the expression
    DataType type;          // type of the expression
    string loc;             // the symbol table entry
    list<int> trueList;     // truelist for voolean expressions 
    list<int> falseList;    // falselist for boolean expressions
    list<int> nextList;     // nextlist for statement expressions
    int fold;               // for arrays/pointers
    string* folder;         // for arrays/pointers

    expression();           // constructor
};

class declaration {
public:
    string name;            // name of the declaration
    int pointers;           // number of pointers
    DataType type;          // type of the declaration
    DataType nextType;      
    vector<int> li;         // list of instructions for the declaration
    expression* initVal;    // initial value of the declaration
    int pc;                 // useful for arrays/pointers
};

// methods
//emit function, overloaded for different types of quads
void emit(string res, string arg1, string arg2, opcode op);
void emit(string res, int constant, opcode op);
void emit(string res, float constant, opcode op);
void emit(string res, char constant, opcode op);

// create new list, conatining only index into quad array, returns a pointer to the newly created list
list<int> makelist(int index);

// merge two lists
list<int> merge(list<int> l1, list<int> l2);

// backpatch a list
void backpatch(list<int> l, int address);

// convert symbol from one type to another and return pointer to the converted symbol
void convertType(expression *arg, expression *res, DataType t);
void convertType(string t, DataType to, string f, DataType from);


// convert int to bool and adds required attributes
void convertIntToBool(expression* e);

// get size of type
int getSize(DataType t);

// print type
string checkType(symbolType t);

// get initial value of symbol
string getInitVal(symbol* s);

#endif

